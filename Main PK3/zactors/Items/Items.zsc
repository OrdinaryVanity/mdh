Class BlankPuff : Actor
{
	Default
	{
		+NOINTERACTION;
		+CLIENTSIDEONLY;
		+BLOODLESSIMPACT;
	}

    States
    {
    Spawn:
        TNT1 A 1;
        Stop;
    }
}

Class MissileAmmo : Ammo replaces Shell
{
	Default
	{
		//$Category Metroid
		Inventory.PickupMessage "Picked up a Missile.";
		Inventory.PickupSound "item/get";
		Inventory.Amount 1;
		Inventory.MaxAmount 5; //Originally 5
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 5;
		Inventory.Icon "MPKUA0";
		+NOGRAVITY;
		Tag "Missile";
	}
	
    States
    {		
	  Spawn:
		TNT1 A 0 NoDelay A_Jump(15, "SpawnPack");
		TNT1 A 1 A_JumpIfInventory("MissileTankAcquired",1,"Spawn2", AAPTR_PLAYER1);
		goto NoSpawn;
		
	  Spawn2:
	    TNT1 A 1 A_ChangeFlag("SPECIAL", 1);
		MPKU A 10 BRIGHT;
        MPKU B 4 BRIGHT;
		loop;
		
	  SpawnPack:
		TNT1 A 0 A_SpawnItemEx("MissileAmmoPack",0,0,2,0,0,0,0,0,0);
		stop;
	  
	  NoSpawn:
	    TNT1 A 1 A_JumpIfInventory("MissileTankAcquired",1,"Spawn2", AAPTR_PLAYER1);
		TNT1 A 1 A_ChangeFlag("SPECIAL", 0);
		TNT1 A 1;
		loop;
    }
}

Class MissileAmmoPack : MissileAmmo
{
	Default
	{
		//$Category Metroid
		Inventory.PickupMessage "Picked up a Missile Pack.";
		Inventory.PickupSound "item/get";
		Inventory.Amount 5;
		Inventory.MaxAmount 5; //Originally 5
		Ammo.BackpackAmount 5;
		Ammo.BackpackMaxAmount 5;
		+NOGRAVITY;
		Tag "Missile Pack";
	}
    States
    {		
	  Spawn:
		TNT1 A 1 NoDelay A_JumpIfInventory("MissileTankAcquired",1,"Spawn2", AAPTR_PLAYER1);
		goto NoSpawn;
		
	  Spawn2:
	    TNT1 A 1 A_ChangeFlag("SPECIAL", 1);
		MPPU A 10 BRIGHT;
        MPPU B 4 BRIGHT;
		loop;
	  
	  NoSpawn:
	    TNT1 A 1 A_JumpIfInventory("MissileTankAcquired",1,"Spawn2", AAPTR_PLAYER1);
		TNT1 A 1 A_ChangeFlag("SPECIAL", 0);
		TNT1 A 1;
		loop;
    }
}

Class MissileAmmo_Dropped : MissileAmmo
{
	Default
	{
		Inventory.PickupMessage "Picked up a Missile.";
		Inventory.PickupSound "item/get";
		Inventory.Icon "MPKUA0";
		+NOGRAVITY;
		+DONTTHRUST;
	}
     States
    {
	  Spawn:
		TNT1 A 0 NoDelay A_Jump(15, "SpawnPack");
        TNT1 A 1 ACS_ExecuteAlways(594,0,30);
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,37) != 1, "NoSpawn");
      Spawn2:
        TNT1 A 0 A_JumpIfInventory("Health100",70,"RemoveCheck");
		TNT1 A 1 A_ChangeFlag("SPECIAL", 1);
        MPKU A 10 BRIGHT A_GiveInventory("Health100",1);
        MPKU B 4 BRIGHT;
        Loop;
		
	  SpawnPack:
		TNT1 A 0 A_SpawnItemEx("MissileAmmoPack",0,0,2,0,0,0,0,0);
		Stop;
		
      GiveGravity:
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,37) != 1, "NoSpawn");
	    TNT1 A 1 A_ChangeFlag("SPECIAL", 1);
        MPKU A 1;
        MPKU A 1 A_ChangeFlag("NOGRAVITY",0);
        MPKU A 1 A_ChangeFlag("LOWGRAVITY",1);
        Goto Spawn2;
		
	  RemoveCheck:
        TNT1 A 0;
        TNT1 A 0 A_TakeInventory("Health100",100);
		TNT1 A 1 A_ChangeFlag("SPECIAL", 1);
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,16,0,0) == 1,"Spawn2");
        MPKU A 10 BRIGHT;
        MPKU B 4 BRIGHT;
        TNT1 A 0;
        Stop;
		
	  Pickup:
		TNT1 A 1 A_JumpIfInventory("MissileTankAcquired",1,"Pickup2", AAPTR_PLAYER1);
		Goto PickupFail;
		
	  Pickup2:
		TNT1 A 0 A_ChangeFlag("SPECIAL", 1);
        TNT1 A 0 A_GiveInventory("MissileAmmo",1);
        TNT1 A 1;
        Stop;
		
	  PickupFail:
        MPKU A 1 BRIGHT; // This is required, else it'll cause a crash.
        Fail;
		
	  NoSpawn:
	    TNT1 A 0;
		TNT1 A 0 A_JumpIfInventory("MissileTankAcquired",1,"Spawn", AAPTR_PLAYER1);
		TNT1 A 1 A_ChangeFlag("SPECIAL", 0);
		TNT1 A 1;
		Loop;
    }
}

Class MissileAmmoPack_Dropped : MissileAmmoPack
{
	Default
	{
		Inventory.PickupMessage "Picked up a Missile Pack.";
		Inventory.PickupSound "item/get";
		+NOGRAVITY;
		+DONTTHRUST;
	}
     States
    {
	  Spawn:
		TNT1 A 0;
        TNT1 A 1 ACS_ExecuteAlways(594,0,30);
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,37) != 1, "NoSpawn");
      Spawn2:
        TNT1 A 0 A_JumpIfInventory("Health100",70,"RemoveCheck");
		TNT1 A 1 A_ChangeFlag("SPECIAL", 1);
        MPPU A 10 BRIGHT A_GiveInventory("Health100",1);
        MPPU B 4 BRIGHT;
        Loop;
		
      GiveGravity:
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,37) != 1, "NoSpawn");
	    TNT1 A 1 A_ChangeFlag("SPECIAL", 1);
        MPPU A 1;
        MPPU A 1 A_ChangeFlag("NOGRAVITY",0);
        MPPU A 1 A_ChangeFlag("LOWGRAVITY",1);
        Goto Spawn2;
		
	  RemoveCheck:
        TNT1 A 0;
        TNT1 A 0 A_TakeInventory("Health100",100);
		TNT1 A 1 A_ChangeFlag("SPECIAL", 1);
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,16,0,0) == 1,"Spawn2");
        MPPU A 10 BRIGHT;
        MPPU B 4 BRIGHT;
        TNT1 A 0;
        Stop;
		
	  Pickup:
		TNT1 A 1 A_JumpIfInventory("MissileTankAcquired",1,"Pickup2", AAPTR_PLAYER1);
		Goto PickupFail;
		
	  Pickup2:
		TNT1 A 0 A_ChangeFlag("SPECIAL", 1);
        TNT1 A 0 A_GiveInventory("MissileAmmo",5);
        TNT1 A 1;
        Stop;
		
	  PickupFail:
        MPPU A 1 BRIGHT; // This is required, else it'll cause a crash.
        Fail;
		
	  NoSpawn:
	    TNT1 A 0;
		TNT1 A 0 A_JumpIfInventory("MissileTankAcquired",1,"Spawn", AAPTR_PLAYER1);
		TNT1 A 1 A_ChangeFlag("SPECIAL", 0);
		TNT1 A 1;
		Loop;
    }
}

Class SuperMissileAmmo : Ammo
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "Picked up a Super Missile.";
		Inventory.PickupSound "item/get";
		Inventory.Amount 1;
		Inventory.MaxAmount 0;
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 0;
		Inventory.Icon "SPKUA0";
		Scale 1.1;
		+NOGRAVITY;
		+Inventory.IGNORESKILL;
		Tag "Super Missile";
	}
	
    States
    {
      Spawn: //Add a check for met_unifiedmissiles CVar here. Need to override super spawns.
		TNT1 A 0 NoDelay
		{
			if(!met_unifiedmissiles)
				return ResolveState("SpawnSupers");
			else
				return ResolveState("SpawnMissile");
		}
        Loop;
		
	  SpawnSupers:
		SPKU A 10 BRIGHT;
        SPKU B 4 BRIGHT;
		Loop;
	  
	  SpawnMissile:
		TNT1 A 0 A_SpawnItem("MissileAmmo");
		Stop;
    }
}

Class SuperMissileAmmo_Dropped : SuperMissileAmmo
{
	Default
	{
		Inventory.PickupMessage "Picked up a Super Missile.";
		Inventory.PickupSound "item/get";
		Scale 1.1;
		+NOGRAVITY;
		+Inventory.IGNORESKILL;
		+DONTTHRUST;
    }
	
	States
    {
      Spawn: //ADD IT HERE TOO
        TNT1 A 0;
        TNT1 A 1 ACS_ExecuteAlways(594,0,30);
      Spawn1:
		TNT1 A 0
		{
			if(!met_unifiedmissiles)
				return ResolveState("SpawnSupers");
			else
				return ResolveState("SpawnMissile");
		}
        Loop;
		
	  SpawnSupers:
        TNT1 A 0 A_JumpIfInventory("Health100",70,"RemoveCheck");
        TNT1 A 0 A_GiveInventory("Health100",1);
        SPKU AAAAAAAAAA 1 BRIGHT;
        SPKU BBBB 1 BRIGHT;
        Loop;
		
	  SpawnMissile:
		TNT1 A 0 A_SpawnItem("MissileAmmo");
		Stop;
		
      GiveGravity:
        SPKU A 1;
        SPKU A 1 A_ChangeFlag("NOGRAVITY",0);
        SPKU A 1 A_ChangeFlag("LOWGRAVITY",1);
        Goto Spawn1;

      RemoveCheck:
        TNT1 A 0;
        TNT1 A 0 A_TakeInventory("Health100",100);
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,16,0,0) == 1,"Spawn1");
        SPKU A 10 BRIGHT;
        SPKU B 4 BRIGHT;
        TNT1 A 0;
        Stop;

      Pickup:
        TNT1 A 0
		{
			if(!met_unifiedmissiles)
				return ResolveState("PickupSupers");
			else
				return ResolveState("PickupMissile");
		}
        Stop;

	  PickupSupers:
		//TNT1 A 0 A_JumpIfInTargetInventory("PowerBeamChargeLevel",1,"PickupFail");
			TNT1 A 0 A_JumpIfInventory("SuperMissileAmmo",0,"PickupFail");
			TNT1 A 0 A_JumpIfInventory("SuperMissileAcquired",1,1);
			Goto PickupFail;
			TNT1 A 0;
			TNT1 A 0 A_GiveInventory("SuperMissileAmmo",1);
			TNT1 A 1;
			Stop;
	  
	  PickupMissile:
			TNT1 A 0 A_GiveInventory("MissileAmmo",1);
			Stop;
			
      PickupFail:
        TNT1 A 0;
        SPKU A 1 BRIGHT; // This is required, else it'll cause a crash.
        Fail;
	}
}

Class PowerBombAmmo : Ammo
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "Picked up a Power Bomb.";
		Inventory.PickupSound "item/get";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 1;
		Inventory.Icon "PBOMD0";
		Scale 1.1;
		+NOGRAVITY;
		+Inventory.IGNORESKILL;
		+DONTTHRUST;
		Tag "Power Bomb";
	}
	
    States
    {
      Spawn:
        PBOM D 10 BRIGHT;
        PBOM E 4 BRIGHT;
        Loop;
    }
}

Class PowerBombAmmo_Dropped : PowerBombAmmo
{
	Default
	{
		Inventory.PickupMessage "Picked up a Power Bomb.";
		Inventory.PickupSound "item/get";
		Scale 1.1;
		+NOGRAVITY;
		+Inventory.IGNORESKILL;
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
        TNT1 A 1;
        TNT1 A 1 ACS_ExecuteAlways(594,0,30);
      Spawn1:
        TNT1 A 0 A_JumpIfInventory("Health100",70,"RemoveCheck");
        PBOM D 10 BRIGHT A_GiveInventory("Health100",1);
        PBOM E 4 BRIGHT;
        Loop;
      GiveGravity:
        PBOM D 1;
        PBOM D 1 A_ChangeFlag("NOGRAVITY",0);
        PBOM D 1 A_ChangeFlag("LOWGRAVITY",1);
        Goto Spawn1;

      RemoveCheck:
        TNT1 A 0;
        TNT1 A 0 A_TakeInventory("Health100",100);
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,16,0,0) == 1,"Spawn1");
        PBOM D 10 BRIGHT;
        PBOM E 4 BRIGHT;
        TNT1 A 0;
        Stop;

      Pickup:
        TNT1 A 0;
        //TNT1 A 0 A_JumpIfInventory("PowerBombAcquired",0,"PickupFail");
        TNT1 A 0 A_JumpIfInventory("PowerBombAcquired",1,2);
        Goto PickupFail;
        TNT1 A 0;
        TNT1 A 0 A_GiveInventory("PowerBombAmmo",1);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class Energy10 : Health replaces Stimpack
{
	Default
	{
		//$Category Metroid;
		Inventory.Amount 15;
		Inventory.PickupMessage "Picked up a small energy capsule.";
		Inventory.PickupSound "health/10";
		Renderstyle "Add";
		Alpha 0.975;
		Scale 0.15;
		+NOGRAVITY;
		+FORCEXYBILLBOARD;
		Tag "10 Energy";
	}
	
    States
    {
      Spawn:
        NRGA A 3 BRIGHT A_SetScale(0.147);
		NRGA B 3 BRIGHT A_SetScale(0.148);
 		NRGA C 3 BRIGHT A_SetScale(0.149);
		NRGA D 3 BRIGHT A_SetScale(0.150);
		NRGA E 3 BRIGHT A_SetScale(0.151);
		NRGA F 3 BRIGHT A_SetScale(0.152);
		NRGA G 3 BRIGHT A_SetScale(0.153);
		NRGA H 3 BRIGHT A_SetScale(0.154);
		NRGA I 3 BRIGHT A_SetScale(0.155);
		NRGA J 3 BRIGHT A_SetScale(0.156);
		NRGA K 3 BRIGHT A_SetScale(0.157);
		NRGA L 3 BRIGHT A_SetScale(0.158);
		NRGA M 3 BRIGHT A_SetScale(0.159);
		NRGA N 3 BRIGHT A_SetScale(0.158);
		NRGA O 3 BRIGHT A_SetScale(0.157);
		NRGA P 3 BRIGHT A_SetScale(0.156);
		NRGA Q 3 BRIGHT A_SetScale(0.155);
		NRGA R 3 BRIGHT A_SetScale(0.154);
		NRGA S 3 BRIGHT A_SetScale(0.153);
		NRGA T 3 BRIGHT A_SetScale(0.152);
		NRGA U 3 BRIGHT A_SetScale(0.151);
		NRGA V 3 BRIGHT A_SetScale(0.150);
		NRGA W 3 BRIGHT A_SetScale(0.149);
		NRGA X 3 BRIGHT A_SetScale(0.148);
        Loop;
    }
}

Class Energy10_Dropped : Energy10
{
	Default
	{
		+DONTTHRUST;
    }
	
	States
    {
      Spawn:
        TNT1 A 0;
        TNT1 A 1;
        TNT1 A 1 ACS_ExecuteAlways(594,0,30);
      Spawn1:
        TNT1 A 0 A_JumpIfInventory("Health100",31,"RemoveCheck");
        TNT1 A 0 A_GiveInventory("Health100",1);
        NRGA A 3 BRIGHT A_SetScale(0.147);
		NRGA B 3 BRIGHT A_SetScale(0.148);
 		NRGA C 3 BRIGHT A_SetScale(0.149);
		NRGA D 3 BRIGHT A_SetScale(0.150);
		NRGA E 3 BRIGHT A_SetScale(0.151);
		NRGA F 3 BRIGHT A_SetScale(0.152);
		NRGA G 3 BRIGHT A_SetScale(0.153);
		NRGA H 3 BRIGHT A_SetScale(0.154);
		NRGA I 3 BRIGHT A_SetScale(0.155);
		NRGA J 3 BRIGHT A_SetScale(0.156);
		NRGA K 3 BRIGHT A_SetScale(0.157);
		NRGA L 3 BRIGHT A_SetScale(0.158);
		NRGA M 3 BRIGHT A_SetScale(0.159);
		NRGA N 3 BRIGHT A_SetScale(0.158);
		NRGA O 3 BRIGHT A_SetScale(0.157);
		NRGA P 3 BRIGHT A_SetScale(0.156);
		NRGA Q 3 BRIGHT A_SetScale(0.155);
		NRGA R 3 BRIGHT A_SetScale(0.154);
		NRGA S 3 BRIGHT A_SetScale(0.153);
		NRGA T 3 BRIGHT A_SetScale(0.152);
		NRGA U 3 BRIGHT A_SetScale(0.151);
		NRGA V 3 BRIGHT A_SetScale(0.150);
		NRGA W 3 BRIGHT A_SetScale(0.149);
		NRGA X 3 BRIGHT A_SetScale(0.148);
        Loop;
      GiveGravity:
        NRGA A 1;
        NRGA A 1 A_ChangeFlag("NOGRAVITY",0);
        NRGA A 1 A_ChangeFlag("LOWGRAVITY",1);
        Goto Spawn1;

      RemoveCheck:
        TNT1 A 0;
        TNT1 A 0 A_TakeInventory("Health100",100);
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,16,0,0) == 1,"Spawn1");
        NRGA A 3 BRIGHT A_SetScale(0.147);
		NRGA B 3 BRIGHT A_SetScale(0.148);
 		NRGA C 3 BRIGHT A_SetScale(0.149);
		NRGA D 3 BRIGHT A_SetScale(0.150);
		NRGA E 3 BRIGHT A_SetScale(0.151);
		NRGA F 3 BRIGHT A_SetScale(0.152);
		NRGA G 3 BRIGHT A_SetScale(0.153);
		NRGA H 3 BRIGHT A_SetScale(0.154);
		NRGA I 3 BRIGHT A_SetScale(0.155);
		NRGA J 3 BRIGHT A_SetScale(0.156);
		NRGA K 3 BRIGHT A_SetScale(0.157);
		NRGA L 3 BRIGHT A_SetScale(0.158);
		NRGA M 3 BRIGHT A_SetScale(0.159);
		NRGA N 3 BRIGHT A_SetScale(0.158);
		NRGA O 3 BRIGHT A_SetScale(0.157);
		NRGA P 3 BRIGHT A_SetScale(0.156);
		NRGA Q 3 BRIGHT A_SetScale(0.155);
		NRGA R 3 BRIGHT A_SetScale(0.154);
		NRGA S 3 BRIGHT A_SetScale(0.153);
		NRGA T 3 BRIGHT A_SetScale(0.152);
		NRGA U 3 BRIGHT A_SetScale(0.151);
		NRGA V 3 BRIGHT A_SetScale(0.150);
		NRGA W 3 BRIGHT A_SetScale(0.149);
		NRGA X 3 BRIGHT A_SetScale(0.148);
        TNT1 A 0;
        Stop;
    }
}

Class Energy25 : Health replaces Medikit
{
	Default
	{
		//$Category Metroid;
		Inventory.Amount 30;
		Inventory.PickupMessage "Picked up a large energy capsule.";
		Inventory.PickupSound "health/25";
		Renderstyle "Add";
		Scale 1;
		Alpha 0.975;
		Scale 0.25;
		+NOGRAVITY;
		+FORCEXYBILLBOARD;
		Tag "25 Energy";
	}
	
    States
    {
      Spawn:
        NRGB A 3 BRIGHT A_SetScale(0.247);
		NRGB B 3 BRIGHT A_SetScale(0.248);
 		NRGB C 3 BRIGHT A_SetScale(0.249);
		NRGB D 3 BRIGHT A_SetScale(0.250);
		NRGB E 3 BRIGHT A_SetScale(0.251);
		NRGB F 3 BRIGHT A_SetScale(0.252);
		NRGB G 3 BRIGHT A_SetScale(0.253);
		NRGB H 3 BRIGHT A_SetScale(0.254);
		NRGB I 3 BRIGHT A_SetScale(0.255);
		NRGB J 3 BRIGHT A_SetScale(0.256);
		NRGB K 3 BRIGHT A_SetScale(0.257);
		NRGB L 3 BRIGHT A_SetScale(0.258);
		NRGB M 3 BRIGHT A_SetScale(0.259);
		NRGB N 3 BRIGHT A_SetScale(0.258);
		NRGB O 3 BRIGHT A_SetScale(0.257);
		NRGB P 3 BRIGHT A_SetScale(0.256);
		NRGB Q 3 BRIGHT A_SetScale(0.255);
		NRGB R 3 BRIGHT A_SetScale(0.254);
		NRGB S 3 BRIGHT A_SetScale(0.253);
		NRGB T 3 BRIGHT A_SetScale(0.252);
		NRGB U 3 BRIGHT A_SetScale(0.251);
		NRGB V 3 BRIGHT A_SetScale(0.250);
		NRGB W 3 BRIGHT A_SetScale(0.249);
		NRGB X 3 BRIGHT A_SetScale(0.248);
        Loop;
    }
}

Class Energy25_Dropped : Energy25
{
	Default
	{
		//$Category Metroid;
		+DONTTHRUST;
    }
	
	States
    {
      Spawn:
        TNT1 A 0;
        TNT1 A 1;
        TNT1 A 1 ACS_ExecuteAlways(594,0,30);
      Spawn1:
        TNT1 A 0 A_JumpIfInventory("Health100",31,"RemoveCheck");
        TNT1 A 0 A_GiveInventory("Health100",1);
        NRGB A 3 BRIGHT A_SetScale(0.247);
		NRGB B 3 BRIGHT A_SetScale(0.248);
 		NRGB C 3 BRIGHT A_SetScale(0.249);
		NRGB D 3 BRIGHT A_SetScale(0.250);
		NRGB E 3 BRIGHT A_SetScale(0.251);
		NRGB F 3 BRIGHT A_SetScale(0.252);
		NRGB G 3 BRIGHT A_SetScale(0.253);
		NRGB H 3 BRIGHT A_SetScale(0.254);
		NRGB I 3 BRIGHT A_SetScale(0.255);
		NRGB J 3 BRIGHT A_SetScale(0.256);
		NRGB K 3 BRIGHT A_SetScale(0.257);
		NRGB L 3 BRIGHT A_SetScale(0.258);
		NRGB M 3 BRIGHT A_SetScale(0.259);
		NRGB N 3 BRIGHT A_SetScale(0.258);
		NRGB O 3 BRIGHT A_SetScale(0.257);
		NRGB P 3 BRIGHT A_SetScale(0.256);
		NRGB Q 3 BRIGHT A_SetScale(0.255);
		NRGB R 3 BRIGHT A_SetScale(0.254);
		NRGB S 3 BRIGHT A_SetScale(0.253);
		NRGB T 3 BRIGHT A_SetScale(0.252);
		NRGB U 3 BRIGHT A_SetScale(0.251);
		NRGB V 3 BRIGHT A_SetScale(0.250);
		NRGB W 3 BRIGHT A_SetScale(0.249);
		NRGB X 3 BRIGHT A_SetScale(0.248);
        Loop;
      GiveGravity:
        NRGB A 1;
        NRGB A 1 A_ChangeFlag("NOGRAVITY",0);
        NRGB A 1 A_ChangeFlag("LOWGRAVITY",1);
        Goto Spawn1;

      RemoveCheck:
        TNT1 A 0;
        TNT1 A 0 A_TakeInventory("Health100",100);
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,16,0,0) == 1,"Spawn1");
        NRGB A 3 BRIGHT A_SetScale(0.247);
		NRGB B 3 BRIGHT A_SetScale(0.248);
 		NRGB C 3 BRIGHT A_SetScale(0.249);
		NRGB D 3 BRIGHT A_SetScale(0.250);
		NRGB E 3 BRIGHT A_SetScale(0.251);
		NRGB F 3 BRIGHT A_SetScale(0.252);
		NRGB G 3 BRIGHT A_SetScale(0.253);
		NRGB H 3 BRIGHT A_SetScale(0.254);
		NRGB I 3 BRIGHT A_SetScale(0.255);
		NRGB J 3 BRIGHT A_SetScale(0.256);
		NRGB K 3 BRIGHT A_SetScale(0.257);
		NRGB L 3 BRIGHT A_SetScale(0.258);
		NRGB M 3 BRIGHT A_SetScale(0.259);
		NRGB N 3 BRIGHT A_SetScale(0.258);
		NRGB O 3 BRIGHT A_SetScale(0.257);
		NRGB P 3 BRIGHT A_SetScale(0.256);
		NRGB Q 3 BRIGHT A_SetScale(0.255);
		NRGB R 3 BRIGHT A_SetScale(0.254);
		NRGB S 3 BRIGHT A_SetScale(0.253);
		NRGB T 3 BRIGHT A_SetScale(0.252);
		NRGB U 3 BRIGHT A_SetScale(0.251);
		NRGB V 3 BRIGHT A_SetScale(0.250);
		NRGB W 3 BRIGHT A_SetScale(0.249);
		NRGB X 3 BRIGHT A_SetScale(0.248);
        TNT1 A 0;
        Stop;
    }
}

Class Energy100 : Health
{
	Default
	{
		//$Category Metroid;
		+DONTTHRUST;
		+FORCEXYBILLBOARD;
		Inventory.Amount 100;
		Inventory.PickupMessage "Picked up a greater energy capsule.";
		Inventory.PickupSound "health/50";
		Renderstyle "Add";
		Scale 0.35;
		Alpha 0.975;
		+NOGRAVITY;
		Tag "100 Energy";
	}
	
    States
    {
      Spawn:
        NRGD A 2 BRIGHT A_SetScale(0.347);
		NRGD B 2 BRIGHT A_SetScale(0.348);
 		NRGD C 2 BRIGHT A_SetScale(0.349);
		NRGD D 2 BRIGHT A_SetScale(0.350);
		NRGD E 2 BRIGHT A_SetScale(0.351);
		NRGD F 2 BRIGHT A_SetScale(0.352);
		NRGD G 2 BRIGHT A_SetScale(0.353);
		NRGD H 2 BRIGHT A_SetScale(0.354);
		NRGD I 2 BRIGHT A_SetScale(0.355);
		NRGD J 2 BRIGHT A_SetScale(0.356);
		NRGD K 2 BRIGHT A_SetScale(0.357);
		NRGD L 2 BRIGHT A_SetScale(0.358);
		NRGD M 2 BRIGHT A_SetScale(0.359);
		NRGD N 2 BRIGHT A_SetScale(0.358);
		NRGD O 2 BRIGHT A_SetScale(0.357);
		NRGD P 2 BRIGHT A_SetScale(0.356);
		NRGD Q 2 BRIGHT A_SetScale(0.355);
		NRGD R 2 BRIGHT A_SetScale(0.354);
		NRGD S 2 BRIGHT A_SetScale(0.353);
		NRGD T 2 BRIGHT A_SetScale(0.352);
		NRGD U 2 BRIGHT A_SetScale(0.351);
		NRGD V 2 BRIGHT A_SetScale(0.350);
		NRGD W 2 BRIGHT A_SetScale(0.349);
		NRGD X 2 BRIGHT A_SetScale(0.348);
        Loop;
    }
}

Class MissileAmmo2 : MissileAmmo_Dropped replaces ShellBox {}
Class MissileAmmo3 : MissileAmmo_Dropped replaces RocketAmmo {}
Class MissileAmmo4 : MissileAmmo_Dropped replaces RocketBox {}
Class NothingAmmo1 : BlankPuff replaces Clip {}
Class NothingAmmo2 : BlankPuff replaces ClipBox {}
Class NothingAmmo3 : BlankPuff replaces Cell {}
Class NothingAmmo4 : BlankPuff replaces CellPack {}

Class NothingHealth1 : BlankPuff replaces HealthBonus {}

Class NothingArmor1 : BlankPuff replaces ArmorBonus {}

Class BucketOfSoulsOrSomething: Health
{
	Default
	{
		Inventory.Amount 10000;
	}
}

Class EnergyTankPickup : CustomInventory replaces Megasphere
{
	Default
	{
		//$Category Metroid;
		RenderStyle "Translucent";
		Alpha 0.85;
		Inventory.PickupMessage "";
		Inventory.PickupSound "no_fun_allowed";
		Inventory.RespawnTics 4200;
		Scale .35;
		FloatBobStrength 0.1;
		+Inventory.AUTOACTIVATE;
		+NOGRAVITY;
		+DONTGIB;
		+FORCEXYBILLBOARD;
		+FLOATBOB;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Energy Tank";
	}
	
    States
    {
	  Spawn:
        ETNK ABCD 3 BRIGHT;
		ETNK EFGH 3 BRIGHT;
        Loop;

      Pickup:
        //TNT1 A 0 A_JumpIfInventory("ETNotInThisLevel",1,"PickupFail");
        TNT1 A 0 A_JumpIfInventory("EnergyTankAcquired",20,"PickupFailCheck");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 3);  // pickup message
        TNT1 A 0 ACS_ExecuteWithResult(594, 5);      // healthy breakfast
        TNT1 A 0 ACS_ExecuteWithResult(594, 7);      // big pharma keeping you down
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;

      PickupFailCheck:
        TNT1 A 0 A_JumpIfHealthLower(2100,1);
        Goto PickupFail;
		
        TNT1 A 0 A_GiveInventory("BucketOfSoulsOrSomething");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 3, 1);  // pickup message, never do pause
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;
    }
}

Class MissileTankPickup : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "";
		Inventory.PickupSound "none_at_all";
		+Inventory.AUTOACTIVATE;
		+DONTGIB;
		+NOGRAVITY;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Missile Tank";
	}
	
    States
    {
	  Spawn:
        MTNK S 20;
        MTNK ABCDEFGHIJKLMNOPQRS 1 BRIGHT;
        Loop;

      Pickup:
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,0,37) != 1, "Pickup2");
		TNT1 A 0 A_GiveInventory("MissileTankAcquired", 1);
		TNT1 A 0 ACS_ExecuteWithResult(594, 36); //give very first 5
		TNT1 A 0 ACS_ExecuteWithResult(594, 37); //gotmissile = 1
		TNT1 A 0 ACS_ExecuteWithResult(594, 20, 1);  // pickup message
		TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

	  Pickup2:
		TNT1 A 0 ACS_ExecuteWithResult(594, 20, 1);  // pickup message
        TNT1 A 0 ACS_ExecutewithResult(594, 6);      // missiles, son (+5 to missiles from now on)
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class SuperMissileTankPickup : CustomInventory
{
	
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "";//"SUPER MISSILE TANK: ACQUIRED"
		Inventory.PickupSound "the_fun_police_does_not_approve";
		Inventory.RespawnTics 4200;
		+Inventory.AUTOACTIVATE;
		+DONTGIB;
		+NOGRAVITY;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Super Missile Tank";
	}
	
    States
    {
      Spawn: //OVERRIDE THIS TOO. Need at least one pickup, then convert all to regular missiles?
		/*TNT1 A 0 NoDelay 
		{
			if(met_unifiedmissiles)
			{
				A_JumpIfInventory("SuperMissileAcquired",1,"SpawnMissile");
				return ResolveState(Null);
			}
			else
			{
				return ResolveState("Spawn");
			}
		}*/
        STNK S 20;
        STNK ABCDEFGHIJKLMNOPQRS 1 BRIGHT;
        Loop;

	  SpawnMissile:
		MTNK S 20;
        MTNK ABCDEFGHIJKLMNOPQRS 1 BRIGHT;
        Loop;
		
      Pickup:
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,0,37) != 1, "Pickup2");
        TNT1 A 0 A_JumpIfInventory("SMNotInThisLevel",1,"PickupFail");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 0);  // pickup message
        TNT1 A 0 ACS_ExecuteWithResult(594, 9);      // explosive pleasure
        TNT1 A 0 ACS_ExecuteWithResult(594, 14);    // you only get one
        TNT1 A 0 A_SetBlend("White", 0.5, 16);       // (climax)
        Stop;

	  PickupMissile:
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,0,37) != 1, "Pickup2");
		TNT1 A 0 A_GiveInventory("MissileTankAcquired", 1);
		TNT1 A 0 ACS_ExecuteWithResult(594, 36); //give very first 5
		TNT1 A 0 ACS_ExecuteWithResult(594, 37); //gotmissile = 1
		TNT1 A 0 ACS_ExecuteWithResult(594, 20, 1);  // pickup message
		TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;
		
      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class AmmoTankSpawner1 : RandomSpawner replaces Backpack
{
	Default
	{
		DropItem "MissileTankPickup", 255, 10;
		DropItem "SuperMissileTankPickup", 255, 10;
		DropItem "PowerBombTankPickup", 255, 10;
	}
}

Class UpgradeSpawnerTier1 : RandomSpawner
{
	Default
	{
		DropItem "MorphBall", 255, 20;
		DropItem "MissileTankPickup", 255, 15;
		DropItem "BombPickup", 255, 8;
		DropItem "ChargeBeamPickup", 255, 7;
		DropItem "HiJumpPickup", 255, 6;
		DropItem "VariaSuitPickup", 255, 5;
		DropItem "GrappleBeamPickup", 255, 10;
		DropItem "RawEnergy", 255, 1;
	}
}

Class UpgradeSpawnerTier2 : RandomSpawner
{
	Default
	{
		DropItem "SuperMissileTankPickup", 255, 30;
		DropItem "EnergyTankPickup", 255, 5;
		DropItem "PowerMissilePickup", 255, 7;
		DropItem "WideShotPickup", 255, 6;
		DropItem "SolarFlarePickup", 255, 5;
		DropItem "WaveMissilePickup", 255, 4;
		DropItem "IceSpreaderPickup", 255, 3;
		DropItem "NovaFlashPickup", 255, 2;
		DropItem "SpaceJumpPickup", 255, 10;
	}
}

Class UpgradeSpawnerTier3 : RandomSpawner
{
	Default
	{
		DropItem "SuperMissileTankPickup", 255, 15;
		DropItem "PowerBombTankPickup", 255, 12;
		DropItem "HyperBeamPickup", 255, 8;
		DropItem "ChainsawBeamPickup", 255, 7;
		DropItem "GravitySuitPickup", 255, 10;
		DropItem "BoostBallPickup", 255, 20;
		DropItem "SpeedBoosterPickup", 255, 11;
	}
}

Class UpgradeSpawnerGreen : UpgradeSpawnerTier1 replaces GreenArmor //Tier 1 upgrades only
{
}

Class UpgradeSpawnerZerk : UpgradeSpawnerTier1 replaces Berserk //Tier 1 upgrades only
{
}

Class UpgradeSpawnerRad : UpgradeSpawnerTier1 replaces RadSuit //Tier 1 upgrades only
{
}

Class UpgradeSpawnerBlue : RandomSpawner replaces BlueArmor //Any Tier
{
	Default
	{
		DropItem "UpgradeSpawnerTier1", 255, 20;
		DropItem "UpgradeSpawnerTier2", 255, 35;
		DropItem "UpgradeSpawnerTier3", 255, 45;
	}
}

Class UpgradeSpawnerMap : RandomSpawner replaces Allmap //Any Tier
{
	Default
	{
		DropItem "UpgradeSpawnerTier1", 255, 5;
		DropItem "UpgradeSpawnerTier2", 255, 50;
		DropItem "UpgradeSpawnerTier3", 255, 20;
	}
}

Class UpgradeSpawnerInfrared : RandomSpawner replaces Infrared //Any Tier
{
	Default
	{
		DropItem "UpgradeSpawnerTier1", 255, 5;
		DropItem "UpgradeSpawnerTier2", 255, 50;
		DropItem "UpgradeSpawnerTier3", 255, 20;
	}
}

Class UpgradeSpawnerBlur : RandomSpawner replaces BlurSphere //Any Tier
{
	Default
	{
		DropItem "UpgradeSpawnerTier1", 255, 5;
		DropItem "UpgradeSpawnerTier2", 255, 50;
		DropItem "UpgradeSpawnerTier3", 255, 20;
	}
}

Class UpgradeSpawnerInvuln : RandomSpawner replaces InvulnerabilitySphere //Any Tier
{
	Default
	{
		DropItem "UpgradeSpawnerTier1", 255, 10;
		DropItem "UpgradeSpawnerTier2", 255, 25;
		DropItem "UpgradeSpawnerTier3", 255, 35;
	}
}

Class EnemyDropSpawner : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		+NOCLIP;
		-SOLID;
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,10,0,0) == 1, "Nope");
        TNT1 A 0 A_SpawnItemEx("EnemyDropSpawner1",random(-5,5),random(-5,5),random(1,10),0,0,0,0,32,0);
        Stop;

      Nope:
        TNT1 A 1;
        Stop;
    }
}

Class EnemyDropSpawnerB : EnemyDropSpawner
{
	Default
	{
		Radius 1;
		Height 1;
		+NOCLIP;
		-SOLID;
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,10,0,0) == 1, "Nope");
        TNT1 A 0 A_SpawnItemEx("EnemyDropSpawner2",random(-5,5),random(-5,5),random(1,10),0,0,0,0,32,0);
        Stop;

      Nope:
        TNT1 A 1;
        Stop;
    }
}

Class EnemyDropSpawnerC : EnemyDropSpawner
{
	Default
	{
		Radius 1;
		Height 1;
		+NOCLIP;
		-SOLID;
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,10,0,0) == 1, "Nope");
        TNT1 A 0 A_SpawnItemEx("EnemyDropSpawner3",random(-5,5),random(-5,5),random(1,10),0,0,0,0,32,0);
        Stop;

      Nope:
        TNT1 A 1;
        Stop;
    }
}

Class EnemyDropSpawnerD : EnemyDropSpawner
{
	Default
	{
		Radius 1;
		Height 1;
		+NOCLIP;
		-SOLID;
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,10,0,0) == 1, "Nope");
        TNT1 A 0 A_SpawnItemEx("EnemyDropSpawner4",random(-5,5),random(-5,5),random(1,10),0,0,0,0,32,0);
        Stop;

      Nope:
        TNT1 A 1;
        Stop;
    }
}

Class SoulsphereSpawner : CustomInventory replaces Soulsphere
{
	Default
	{
		Radius 1;
		Height 1;
		+NOCLIP;
		-SOLID;
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,11,0,0) == 1, "SpawnDM");
        TNT1 A 0 A_SpawnItemEx("SoulSpawner");
        Stop;

      SpawnDM:
        TNT1 A 0 A_SpawnItemEx("Soul_EnergyTank",0,0,0,0,0,0,0,32);
        Stop;
    }
}

Class SoulSpawner : RandomSpawner
{
	Default
	{
		DropItem "Soul_Energy100", 255, 25;
		DropItem "Soul_EnergyTank", 255, 25;
		DropItem "UpgradeSpawnerTier2", 255, 15;
	}
}

Class Soul_Energy100: Energy100
{
    States
    {
      Spawn:
        TNT1 AA 0 A_ChangeFlag("DROPPED", 0);
        Goto Super::Spawn;
    }
}

Class Soul_EnergyTank: EnergyTankPickup
{
    States
    {
      Spawn:
        TNT1 AA 0 A_ChangeFlag("DROPPED", 0);
        Goto Super::Spawn;
    }
}

Class EnemyDropSpawner1 : RandomSpawner
{
	Default
	{
		+DROPPED;
		DropItem "Energy10_Dropped", 175, 15;
		DropItem "Energy25_Dropped", 100, 10;
		DropItem "MissileAmmo_Dropped", 150, 5;
	}
}

Class EnemyDropSpawner2 : RandomSpawner
{
	Default
	{
		+DROPPED;
		DropItem "Energy10_Dropped", 175, 15;
		DropItem "Energy25_Dropped", 100, 10;
		DropItem "MissileAmmo_Dropped", 150, 5;
		DropItem "SuperMissileAmmo_Dropped", 125, 3;
	}
}

Class EnemyDropSpawner3 : RandomSpawner
{
	Default
	{
		+DROPPED;
		DropItem "Energy10_Dropped", 175, 15;
		DropItem "Energy25_Dropped", 100, 10;
		DropItem "MissileAmmo_Dropped", 150, 5;
		DropItem "PowerBombAmmo_Dropped", 100, 1;
	}
}

Class EnemyDropSpawner4 : RandomSpawner
{
	Default
	{
		+DROPPED;
		DropItem "Energy10_Dropped", 175, 15;
		DropItem "Energy25_Dropped", 100, 10;
		DropItem "MissileAmmo_Dropped", 150, 5;
		DropItem "SuperMissileAmmo_Dropped", 125, 3;
		DropItem "PowerBombAmmo_Dropped", 100, 1;
	}
}

Class SoulsphereSpawner1 : RandomSpawner // Hack, hack, hack.
{
	Default
	{
		DropItem "Energy100", 255;
	}
}

Class SoulsphereSpawner2 : RandomSpawner
{
	Default
	{
		DropItem "EnergyTankPickup", 255;
	}
}

Class SpeedBoosterPickup : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_have_the_right_to_remain_silent";
		+Inventory.AUTOACTIVATE;
		+NOGRAVITY;
		+DONTGIB;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Speed Booster";
	}
	
    States
    {
	  Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,49,0,0) == 1, "Tier3Time");
		SPBS A 10;
        SPBS B 5 BRIGHT;
		Loop;
		
	  Tier3Time:
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;

      Pickup:
        TNT1 A 0 A_JumpIfInventory("SpeedBoosterAcquired",1,"PickupFail");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 4); // pickup message
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class PowerBombTankPickup : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "";
		Inventory.PickupSound "anything_you_say_or_do_will_be_held_against_you_in_a_court_of_law";
		Inventory.RespawnTics 4200;
		+Inventory.AUTOACTIVATE;
		+DONTGIB;
		+NOGRAVITY;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Power Bomb Tank";
	}
    States
    {
      Spawn:
        BTNK S 20;
        BTNK ABCDEFGHIJKLMNOPQRS 1 BRIGHT;
        Loop;

      Pickup:
        TNT1 A 0 A_JumpIfInventory("PBNotInThisLevel",1,"PickupFail");
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,0,58) != 1, "Pickup2");
		TNT1 A 0 A_GiveInventory("PowerBombAcquired", 1);
		TNT1 A 0 ACS_ExecuteWithResult(594, 20, 2);  // pickup message
        TNT1 A 0 ACS_ExecuteWithResult(594, 38);     // give first power bomb
        TNT1 A 0 ACS_ExecuteWithResult(594, 15);     // level limiter
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

	  Pickup2:
		TNT1 A 0 ACS_ExecuteWithResult(594, 20, 2);  // pickup message
		TNT1 A 0 ACS_ExecuteWithResult(594, 12);     // actually gives bomb
        TNT1 A 0 ACS_ExecuteWithResult(594, 15);     // level limiter
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
		Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class RawEnergy : CustomInventory
{
	Default
	{
		//$Category Metroid;
		RenderStyle "Add";
		Alpha 0.95;
		Scale 0.65;
		+Inventory.AUTOACTIVATE;
		+NOGRAVITY;
		+SHOOTABLE;
		+DONTTHRUST;
		Inventory.PickupMessage "RAW ENERGY DEPOSIT: ACQUIRED";
		Inventory.PickupSound "rawenergy/get";
		Tag "Raw Energy";
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,51,0,0) == 1, "Tier1Time");
        TNT1 A 0 A_PlaySound("rawenergy/idle");
        EFLD WWWWWWWWWW 2 BRIGHT;
        EFLD WWWWW 2 BRIGHT; 
        EFLD ABCDEFGHIJKLMNOPQRSTUV 2 BRIGHT;
        Loop;

	  Tier1Time:
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;

      Pickup:
        TNT1 A 0;
		TNT1 A 0 A_JumpIfInventory("BasicArmor",99,"PickupFail");
        TNT1 A 0 A_SetBlend("White", 0.5, 35);
        TNT1 A 0 A_GiveInventory("RawEnergyShield",1);
		TNT1 A 0 A_GiveInventory("GotArmor",1);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class RawEnergyShield : BasicArmorPickup
{
	Default
	{
		Armor.SavePercent 100;
		Armor.SaveAmount 125;
		DamageFactor "Normal", 0.5; // For PvE.
		DamageFactor "PowerBeam", 0.9;
		DamageFactor "PowerCharged", 0.9;
		DamageFactor "SpazerBeam", 0.9;
		DamageFactor "PlasmaBeam", 0.9;
		DamageFactor "PlasmaCharged", 0.9;
		DamageFactor "WaveBeam", 0.9;
		DamageFactor "WaveCharged", 0.9;
		DamageFactor "IceBeam", 0.9;
		DamageFactor "IceCharged", 0.9;
		DamageFactor "IceBeamExplode", 0.9;
		DamageFactor "IceChargedExplode", 0.9;
		DamageFactor "LongBeam", 0.9;
		DamageFactor "LongCharged", 0.9;
		DamageFactor "DoomCannon", 0.9;
		DamageFactor "Missile", 0.9;
		DamageFactor "SuperMissile", 0.9;
		DamageFactor "BoostBall", 0.9;
		DamageFactor "Bomb", 0.9;
		DamageFactor "PowerBomb", 0.9; // In PvP, however, it only adds 10% resistance to everything.
		Inventory.Icon "EFLDQ0";
	}
}

Class RawEnergyShield2 : RawEnergyShield 
{ 
	Default
	{
		Armor.SaveAmount 1;
	}
}

Class SpaceJumpPickup : CustomInventory 
{
	Default
	{
		//$Category Metroid;
		Scale 0.30;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		+Inventory.AUTOACTIVATE;
		+NOGRAVITY;
		+DONTGIB;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Space Jump";
	}
	
    States
    {
	  Spawn:
	    TNT1 A 0;
		SJMP BCDEFGHIJKLMNOPQRSTUVWX 3 BRIGHT;
        TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,50,0,0) == 1, "RandomSpawn");
		Loop;

	  RandomSpawn:
        TNT1 A 0;
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;

      Pickup:
        TNT1 A 0 A_JumpIfInventory("SpaceJumpAcquired",1,"PickupFail");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 5); // pickup message
        TNT1 A 0 A_GiveInventory("CanSpaceJump",1);
		TNT1 A 0 A_GiveInventory("RuneHighJumpDummy",1);
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class MorphBall : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		+Inventory.AUTOACTIVATE;
		+NOGRAVITY;
		+DONTGIB;
		+DONTTHRUST;
		+FORCEXYBILLBOARD;
		Height 32;
		Radius 16;
		RenderStyle "Translucent";
		Alpha 0.85;
		XScale 0.4;
		YScale 0.375;
		Tag "Morph Ball";
	}
	
	States 
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,33,0,0) == 1, "Tier1Time");
		MBPU ABCDEFGHIKLMNOPQRSTUVWXYZ 2;
		Loop;
		
		Tier1Time:
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;
		
		Pickup:
        TNT1 A 0 A_JumpIfInventory("MorphBallAcquired",1,"PickupFail");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 6); // pickup message
        TNT1 A 0 A_GiveInventory("MorphBallActivate",1);
		TNT1 A 0 A_GiveInventory("MorphBallAcquired",1);
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;
		
		PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class VariaSuitPickup : CustomInventory 
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		+INVENTORY.INVBAR;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.FANCYPICKUPSOUND;
		+DONTGIB;
		+Inventory.AUTOACTIVATE;
		+NOGRAVITY;
		+DONTGIB;
		+SHOOTABLE;
		+DONTTHRUST;
		Scale 0.50;
		DamageFactor "Slime", 0;
		DamageFactor "Lava", 0.5;
		DamageFactor "Fire", 0;
		DamageFactor "Normal", 0.50;
		Tag "Varia Suit";
	}
	
    States
    {
	  Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,34,0,0) == 1, "Tier1Time");
        VSPK AABBBCCCDD 1 BRIGHT;
		VSPK DEEEFFFGGGHHH 1;
        Loop;

	  Tier1Time:
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;

	Pickup:
		TNT1 A 0 A_JumpIfInventory("VariaSuitAcquired", 1, "Nope");
		TNT1 A 0 ACS_ExecuteWithResult(594, 20, 15);
		TNT1 A 0 A_GiveInventory("VariaSuitAcquired", 1);
		TNT1 A 0 A_GiveInventory("IHateHeat", 1);
		TNT1 A 1 A_SetBlend("Red", 0.5, 5);
		TNT1 A 0;
		Stop;

	Nope:
		TNT1 A 0;
		Fail;
    }
}

Class IHateHeat : PowerProtection
{
	Default
	{
		Inventory.Amount 0;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.PERSISTENTPOWER;
		PowerUp.Duration 0x7FFFFFFF;
		DamageFactor "Slime", 0;
		DamageFactor "Lava", 0.5;
		DamageFactor "Normal", 0.85;
		DamageFactor "Fire", 0;
	}
}

Class GrappleBeamPickup : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Scale 0.3;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		+INVENTORY.INVBAR;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.FANCYPICKUPSOUND;
		+DONTGIB;
		+Inventory.AUTOACTIVATE;
		+NOGRAVITY;
		+DONTGIB;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Grapple Beam";
	}
	
    States
    {
	  Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,34,0,0) == 1, "Tier1Time");
        GPLB ABCDEFGHIJKLMNOPQRSTUVWX 2 BRIGHT;
        Loop;

	  Tier1Time:
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;

	Pickup:
		TNT1 A 0 A_JumpIfInventory("GrappleBeamAcquired", 1, "Nope");
		TNT1 A 0 ACS_ExecuteWithResult(594, 20, 15);
		TNT1 A 0 A_GiveInventory("GrappleBeamAcquired", 1);
		TNT1 A 1 A_SetBlend("White", 0.5, 5);
		TNT1 A 0;
		Stop;
		
	Nope:
		TNT1 A 0;
		Fail;
    }
}

Class ChargeBeamPickup : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		+INVENTORY.INVBAR;
		+INVENTORY.UNDROPPABLE;
		+INVENTORY.FANCYPICKUPSOUND;
		+NOGRAVITY;
		+Inventory.AUTOACTIVATE;
		+SHOOTABLE;
		+DONTTHRUST;
		Scale 0.55;
		Tag "Charge Beam";
	}
	
    States
    {
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,35,0,0) == 1, "Tier1Time");
		CHBM A 10 BRIGHT;
		CHBM A 5;
		Loop;
		
		Tier1Time:
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;
		
		Pickup:
        TNT1 A 0 A_JumpIfInventory("ChargeBeamAcquired",1,"PickupFail");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 16); // pickup message
        TNT1 A 0 A_GiveInventory("ChargeBeamAcquired",1);
		TNT1 A 0 A_TakeInventory("ChargeDummy", 1);
        TNT1 A 0 A_SetBlend("Yellow", 0.5, 16);
        Stop;
		
		PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class BombPickup : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Scale 0.6;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		+Inventory.AUTOACTIVATE;
		+DONTGIB;
		+NOGRAVITY;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Bombs";
	}
	
    States
    {
	  Spawn:
	    TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,53,0,0) == 1, "Tier1Time");
		BMPK AAABBBCCCDDDEEEFFFGGGHHHIIIJJJKKKLLLMMMNNNOOOPPP 1;
		Loop;
		
	  Tier1Time:
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;

      Pickup:
        TNT1 A 0 A_JumpIfInventory("BombsAcquired",1,"PickupFail");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 25); // pickup message
        TNT1 A 0 A_GiveInventory("BombsAcquired",1);
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class BoostBallPickup : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		+Inventory.AUTOACTIVATE;
		+DONTGIB;
		+NOGRAVITY;
		+SHOOTABLE;
		+DONTTHRUST;
		+FORCEXYBILLBOARD;
		RenderStyle "Translucent";
		Alpha 0.85;
		XScale 0.4;
		YScale 0.375;
		Tag "Boost Ball";
	}
	
    States
    {
	  Spawn:
		TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,54,0,0) == 1, "Tier3Time");
		BSBL ABCDEFGHIJKLMNOPQRSTUVWXYZ 2;
		Loop;
		
	  Tier3Time:
        TNT1 A 0;
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier3",0,0,0,0,0,0,0,32);
        Stop;

      Pickup:
        TNT1 A 0 A_JumpIfInventory("BoostBallAcquired",1,"PickupFail");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 26); // pickup message
        TNT1 A 0 A_GiveInventory("BoostBallAcquired",1);
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class HiJumpPickup : CustomInventory
{
	Default
	{
		//$Category Metroid;
		Alpha 1.0;
		Scale 0.3;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		+Inventory.AUTOACTIVATE;
		+DONTGIB;
		+NOGRAVITY;
		+SHOOTABLE;
		+DONTTHRUST;
		Tag "Hi-Jump Boots";
	}
	
    States
    {
	  Spawn:
	    TNT1 A 0;
		TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,55,0,0) == 1, "Tier1Time");
		HJMP ABCDEFGHIJKLMNOPQRSTUVWXYZ 2 BRIGHT;
		HJUP ABCDEFGHIJKLMNOPQRSTUV 2 BRIGHT;
		Loop;
		
	  Tier1Time:
        TNT1 A 0;
        TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
        Stop;

      Pickup:
        TNT1 A 0 A_JumpIfInventory("HiJumpAcquired",1,"PickupFail");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 27); // pickup message
        TNT1 A 0 A_GiveInventory("HiJumpAcquired",1);
		TNT1 A 0 A_GiveInventory("HiJump",1);
        TNT1 A 0 A_SetBlend("White", 0.5, 16);
        Stop;

      PickupFail:
        TNT1 A 0;
        Fail;
    }
}

Class HiJump : PowerHighJump
{
	Default
	{
		Inventory.Amount 0;
		+INVENTORY.AUTOACTIVATE;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.PERSISTENTPOWER;
		PowerUp.Duration 0x7FFFFFFF;
		PowerUp.Strength 1.50;
	}
}

Class MetCanJumpHigh : Ammo
{
	Default
	{
		Inventory.MaxAmount 1;
		-INVENTORY.INVBAR;
	}
}

Class MetCanJumpHighDelay : Powerup
{
	Default
	{
		Powerup.Duration 8;
	}
}

Class ChargeDummy : CustomInventory
{
	Default
	{
		+NOINTERACTION;
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
        Stop;
    }
}

Class ChargeDummy2 : CustomInventory
{
	Default
	{
		+NOINTERACTION;
	}
	
    States
    {
      Spawn:
        TNT1 A 0;
        Stop;
    }
}

Class ScanVisor : CustomInventory
{
	Default
	{
		+NOGRAVITY;
		+Inventory.AUTOACTIVATE;
		Inventory.PickupMessage "";
		Inventory.PickupSound "you_are_under_arrest_for_intent_to_enjoy";
		Inventory.RespawnTics 4200;
		Scale 0.50;
	}
	
    States
    {
		Spawn:
			TNT1 A 0;
			TNT1 A 0 A_JumpIf(ACS_ExecuteWithResult(594,56,0,0) == 1, "RandomSpawn");
			DCPK A 1;
			Loop;
	
		RandomSpawn:
			TNT1 A 0;
			TNT1 A 0 A_SpawnItemEx("UpgradeSpawnerTier1",0,0,0,0,0,0,0,32);
			Stop;
		
		Pickup:
			TNT1 A 0 A_JumpIfInventory("ScanVisorAcquired",1,"PickupFail");
			//TNT1 A 0 ACS_ExecuteWithResult(594, 20, 28); // pickup message
			TNT1 A 0 A_GiveInventory("ScanVisorAcquired", 1);
			TNT1 A 0 A_GiveInventory("ScanVisorWeapon", 1);
			TNT1 A 0 A_GiveInventory("ScanLog", 1);
			//TNT1 A 0 A_SetBlend("White", 0.5, 16);
			stop;
	}
}

Class RedEnergyTankPickup : CustomInventory
{
	Default
	{
		RenderStyle "Translucent";
		Alpha .85;
		Inventory.PickupMessage "";
		Inventory.PickupSound "no_fun_allowed";
		Inventory.RespawnTics 4200;
		Scale .35;
		FloatBobStrength 0.1;
		+Inventory.AUTOACTIVATE;
		+NOGRAVITY;
		+DONTGIB;
		+FORCEXYBILLBOARD;
		+FLOATBOB;
		+SHOOTABLE;
		+DONTTHRUST;
	}
	
    States
    {
      Spawn2D:
        RTNK ABCD 3 BRIGHT;
		RTNK EFGH 3 BRIGHT;
        Loop;

      Pickup:
        //TNT1 A 0 A_JumpIfInventory("ETNotInThisLevel",1,"PickupFail");
        TNT1 A 0 A_JumpIfInventory("EnergyTankAcquired",20,"PickupFailCheck");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 3);  // pickup message
        TNT1 A 0 ACS_ExecuteWithResult(594, 5);      // healthy breakfast
        TNT1 A 0 ACS_ExecuteWithResult(594, 7);     // big pharma keeping you down
        TNT1 A 0 A_SetBlend("Red", 0.5, 16);
        Stop;

	  GiveShield:
		TNT1 A 0 A_GiveInventory("RawEnergy");
		Stop;
		
      PickupFail:
        TNT1 A 0;
        Fail;

      PickupFailCheck:
        TNT1 A 0 A_JumpIfHealthLower(2200,1);
        Goto PickupFail;
		
		TNT1 A 0 A_JumpIfInventory("BasicArmor", 1, "GiveShield");
        TNT1 A 0 A_GiveInventory("BucketOfSoulsOrSomething");
		TNT1 A 0 A_GiveInventory("RawEnergy");
        TNT1 A 0 ACS_ExecuteWithResult(594, 20, 3, 1);  // pickup message, never do pause
        TNT1 A 0 A_SetBlend("Red", 0.5, 16);
        Stop;
    }
}