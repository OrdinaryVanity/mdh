Class MDOBeam : Weapon abstract
{
	const PSP_WB = -100;
	
	// Thanks to Lewisk3 for the help with this. Fuck vectors.
	action void TheSucc()
	{
		int rad = GetCvar("met_pulldist");
		
		if(GetCvar("met_chargepull"))
		{
			for(let i = BlockThingsIterator.Create(self,rad); i.Next();) //Iterate through all actors in a 360 unit range
			{ 
				Actor other = i.thing;
				Vector3 vec1 = self.pos;
				Vector3 vec2 = other.pos;
				Vector3 vec3 = level.vec3Diff(self.pos, other.pos);
				//Console.printf("%f, %f, %f", vec3.x, vec3.y, vec3.z);
				if(other==self)
				{
					Continue; //If the actor is a player, skip
				} 
				
				double distance = Distance3D(self);
				double distance2 = Distance3D(other);
				
				if(distance>rad)
				{
					Continue; //If it's above the specified distance, skip
				} 
				
				if((self.player) && (other is "Ammo") || (other is "Health")) //If it's a player, and other is an item, continue
				{
					if(distance2<16) // If item is within 16 units away from player, grab it automatically.
					{
						other.Touch(self);
					}
					
					other.A_Face(self); //Face the player
					other.vel = vec3.Unit() * -6.0; //Move towards the player with a speed of 6 units per tick
					distance2 = Distance3D(other); //update distance2 with the item's position.
				}
			}
		}
    }
	
	action void A_PSPFadeOut(double factor)
    {
        if (!player)
            return;
        let psp = player.FindPSprite(OverlayID());
        if (psp)
        {
            psp.alpha -= factor;
            if (psp.alpha <= 0)
                player.SetPSprite(OverlayID(), ResolveState("Null"));
        }
    }
	
	action void A_PSPDestroy(int layer)
    {
        if (!player)
            return;
        let psp = player.FindPSprite(layer);
        if (psp)
        {
            psp.Destroy();
        }
    }

    override void DoEffect()
    {
        super.DoEffect();
        // Do nothing if it has no owner, or it's not a player,
        // or it's frozen:
        if (!owner || !owner.player || owner.isFrozen())
            return;
        
        // Check the owner has a weapon selected and it's
        // this weapon:
        let weap = owner.player.readyweapon;
        if (weap && weap == self)
        {
            // Check that the player is pressing +user4:
            if (owner.player.cmd.buttons & BT_USER4)
            {
                // Check if the quick kick layer is active:
                let wbpsp = owner.player.FindPSprite(PSP_WB);
                // If it is NOT, then create it:
                if (!wbpsp)
                {
                    owner.player.SetPSprite(PSP_WB, ResolveState("WarBlade"));
                }
            }
        }
    }
	
	Default
	{
		//Only Weapon.SlotNumber, SelectionOrder, InventoryIcon
		//PickupMessage, Obituary are unique
		
		Weapon.AmmoType "MissileAmmo";
		Weapon.AmmoType2 "SuperMissileAmmo";
		Weapon.AmmoUse1 0;
		Weapon.AmmoUse2 0;
		Weapon.BobRangeX 0.4;
		Weapon.BobRangeY 0.4;
		Weapon.BobSpeed 2.8; //2.8
		Weapon.BobStyle "Inverse";
		+Weapon.NOALERT;
		+Weapon.NOAUTOAIM;
		+Weapon.NOAUTOFIRE;
		+Weapon.NO_AUTO_SWITCH;
		+Inventory.UNDROPPABLE;
	}
	
	States 
    {
		WarBlade:
			SSAW KL 1
			{
				let plr = SamusPlayer(player.mo);
				if(!plr)
					return;
					
				if(plr)
					plr.Thrust(4.0,plr.angle);
				
				else
					return;
			}
			SSAW M 2 
			{
				A_RailAttack(16, -48, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, -40, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, -32, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, -24, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, -16, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, -8, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, 0, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, 8, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, 16, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, 24, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, 32, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, 40, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
				A_RailAttack(16, 48, FALSE, "", "", RGF_SILENT | RGF_EXPLICITANGLE | RGF_CENTERZ, 0, "BulletPuff", 0, 0, 128.0, 0);
			}
			SSAW NO 1;
			TNT1 A 35;
			Stop;
    }
}

Class GrossHack : ArtiBlastRadius 
{
	Default
	{
		+INVENTORY.AUTOACTIVATE;
	}
}