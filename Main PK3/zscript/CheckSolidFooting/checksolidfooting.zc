function bool CheckSolidFooting(int tid, int flags)
{
    int x = GetActorX(0);
    int y = GetActorY(0);
    int z = GetActorZ(0);
    int fz = GetActorFloorZ(0);
    int vz = GetActorVelZ(0);
    int radius = GetActorProperty(0, APROP_Radius);
    
    // we need to remember the activator
    if (!tid)
    {
        Thing_ChangeTID(tid, UniqueTID());
        tid = ActivatorTID();
    }
    
    // remember this for later
    bool shootable = CheckFlag(0, "SHOOTABLE");
    
    // unset shootable on actor
    GiveInventory("UnSetShootable", 1);
    
    for (int px = -radius; px <= radius; px += radius)
        for (int py = -radius; py <= radius; py += radius)
    {
        int point = UniqueTID();
        SpawnForced("CheckSolidFooting", x + px, y + py, z, point);
        
        int check = UniqueTID();
        LineAttack(point, 0, 0.25, 0, "CheckSolidFooting", "", 9.0, FHF_NORANDOMPUFFZ|FHF_NOIMPACTDECAL, check);
        
        if (ThingCount(T_NONE, check) > 0)
        {
            if ((flags & CSF_SOLIDACTORS) && SetActivatorToTarget(check))
            {
                int height  = GetActorProperty(0, APROP_Height);
                int hitzpos = GetActorZ(0);
                int hitzvel = GetActorVelZ(0);
                
                // restore activator
                SetActivator(tid);
                
                // restore shootable flag
                if (shootable)
                    GiveInventory("SetShootable", 1);
                
                if (z == hitzpos + height && vz == hitzvel)
                    return true;
                else
                    return false;
            }
            
            // restore shootable flag
            if (shootable)
                GiveInventory("SetShootable", 1);
            
            if (flags & CSF_SOLIDGROUND)
                return true;
        }
    }
    
    // restore shootable flag
    if (shootable)
        GiveInventory("SetShootable", 1);
    
    if (flags & CSF_SOLIDGROUND)
        return z <= fz;
    return false;
}
